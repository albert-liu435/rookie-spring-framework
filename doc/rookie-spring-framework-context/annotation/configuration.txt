ConfigurationClassPostProcessor 是 Spring 框架中的一个后置处理器，主要用于处理带有 @Configuration 注解的配置类。它在 Spring 容器启动时会扫描并解析这些配置类，并进行相关的处理。

AnnotationConfigApplicationContext#AnnotationConfigApplicationContext-->AnnotatedBeanDefinitionReader#AnnotatedBeanDefinitionReader-->AnnotationConfigUtils#registerAnnotationConfigProcessors-->AnnotationConfigUtils#registerAnnotationConfigProcessors

方法：	public static Set<BeanDefinitionHolder> registerAnnotationConfigProcessors(
			BeanDefinitionRegistry registry, @Nullable Object source)

查看是否包含org.springframework.context.annotation.internalConfigurationAnnotationProcessor的bean定义，不包含的话就创建一个ConfigurationClassPostProcessor,并添加到BeanDefinitionRegistry集合中。同理AutowiredAnnotationBeanPostProcessor，EventListenerMethodProcessor，DefaultEventListenerFactory都一样类似。

ConfigurationClassPostProcessor实例化过程及执行postProcessBeanFactory方法，AbstractApplicationContext#refresh()-->PostProcessorRegistrationDelegate#invokeBeanFactoryPostProcessors()-->ConfigurationClassPostProcessor#postProcessBeanFactory()-->ConfigurationClassPostProcessor#enhanceConfigurationClasses


以下是 ConfigurationClassPostProcessor 的主要作用和特点：

处理配置类：

主要用于处理带有 @Configuration 注解的配置类。扫描并解析这些配置类，并将其中声明的 Bean 定义注册到容器中。

支持组件扫描：

在扫描配置类时，还会处理 @Component、@ComponentScan、@Import、@ImportResource 等注解

处理@Bean注解：

对于配置类中使用 @Bean 注解声明的方法，会解析这些方法并将其返回的对象注册为 Spring Bean。

处理条件注解：
根据条件注解决定是否注册 Bean。如@ConditionalOnBean、@ConditionalOnMissingBean 等

处理代理模式：

在需要使用代理模式的情况下，会对配置类进行处理，确保代理模式的正确使用。

处理组件依赖：

会处理配置类之间的依赖关系，确保配置类之间的依赖关系正确解析并注册到容器中。

总的来说，ConfigurationClassPostProcessor 在 Spring 容器启动过程中起着至关重要的作用，它负责扫描、解析和注册带有 @Configuration 注解的配置类，是 Spring 容器实现组件自动装配和依赖注入的重要组成部分。

解析流程：
org.springframework.context.support.AbstractApplicationContext#invokeBeanFactoryPostProcessors--》PostProcessorRegistrationDelegate#invokeBeanFactoryPostProcessors--》org.springframework.context.annotation.ConfigurationClassPostProcessor#postProcessBeanDefinitionRegistry


参考文档：https://blog.csdn.net/scj1022/article/details/137430561
https://blog.csdn.net/qq_45721579/article/details/136235459
