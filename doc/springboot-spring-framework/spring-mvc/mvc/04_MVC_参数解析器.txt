测试项目：
rookie-springboot-webmvc
com.rookie.bigdata.WebMvcBootApplication

com.rookie.bigdata.controller.StudentController

1 工作原理
    说明：本文重点在于说明参数解析器的工作原理和使用方式，为避免文章过于冗长，会刻意省略对异步请求和文件上传部分的分支逻辑，读者可在理解主线逻辑后自定阅读该部分源码。源码介绍时，会忽略所有的日志打印以及与主线逻辑无关的try-catch-finnally块
    1.1 解析原理
        SpringMVC系列-2 HTTP请求调用链 中介绍过：收到http请求后，进入DispatcherServlet的dispatcherServlet方法：
        在执行HandlerInterceptor的preHandle和postHandle之间，会通过ha.handle(processedRequest, response, mappedHandler.getHandler())反射调用Controller接口，跟踪该调用链进入
        public void invokeAndHandle(ServletWebRequest webRequest, ModelAndViewContainer mavContainer, Object... providedArgs) throws Exception {
        	//	⚠️1.调用controller接口
        	Object returnValue = invokeForRequest(webRequest, mavContainer, providedArgs);

        	//	⚠️2.处理返回值
        	setResponseStatus(webRequest);
        	if (returnValue == null) {
        		if (isRequestNotModified(webRequest) || getResponseStatus() != null || mavContainer.isRequestHandled()) {
        			disableContentCachingIfNecessary(webRequest);
        			mavContainer.setRequestHandled(true);
        			return;
        		}
        	} else if (StringUtils.hasText(getResponseStatusReason())) {
        		mavContainer.setRequestHandled(true);
        		return;
        	}

        	mavContainer.setRequestHandled(false);
        	Assert.state(this.returnValueHandlers != null, "No return value handlers");
        	try {
        		this.returnValueHandlers.handleReturnValue(returnValue, getReturnValueType(returnValue), mavContainer, webRequest);
        	} catch (Exception ex) {
        		if (logger.isTraceEnabled()) {
        			logger.trace(formatErrorForReturnValue(returnValue), ex);
        		}
        		throw ex;
        	}
        }
        invokeAndHandle方法从逻辑上可以分为两个部分：（1）调用controller接口并获取返回值；（2）处理返回值。
        本文关注第一部分：Object returnValue = invokeForRequest(webRequest, mavContainer, providedArgs);
        其中：webRequest包装了HTTP请求的request和response对象，mavContainer是MVC对象，providedArgs传入的是null.
        跟进invokeForRequest方法
            public Object invokeForRequest(NativeWebRequest request, @Nullable ModelAndViewContainer mavContainer, Object... providedArgs) throws Exception {
            	Object[] args = getMethodArgumentValues(request, mavContainer, providedArgs);
            	return doInvoke(args);
            }
        包括两个步骤：（1）调用getMethodArgumentValues获取参数；（2）将步骤（1）获取的参数传递给doInvoke，通过反射调用Controller接口并返回结果。
        跟进getMethodArgumentValues方法：
            protected Object[] getMethodArgumentValues(NativeWebRequest request, @Nullable ModelAndViewContainer mavContainer,	Object... providedArgs) throws Exception {
            	MethodParameter[] parameters = getMethodParameters();
            	if (ObjectUtils.isEmpty(parameters)) {
            		return new Object[0];
            	}

            	Object[] args = new Object[parameters.length];
            	for (int i = 0; i < parameters.length; i++) {
            		MethodParameter parameter = parameters[i];
            		parameter.initParameterNameDiscovery(this.parameterNameDiscoverer);
            		args[i] = findProvidedArgument(parameter, providedArgs);
            		if (args[i] != null) {
            			continue;
            		}
            		if (!this.resolvers.supportsParameter(parameter)) {
            			throw new IllegalStateException(formatArgumentError(parameter, "No suitable resolver"));
            		}
            		try {
            			args[i] = this.resolvers.resolveArgument(parameter, mavContainer, request, this.dataBinderFactory);
            		} catch (Exception ex) {
            			throw ex;
            		}
            	}
            	return args;
            }
        由于入参providedArgs为null, 因此上述逻辑可以简化为：
            protected Object[] getMethodArgumentValues(NativeWebRequest request, @Nullable ModelAndViewContainer mavContainer,	Object... providedArgs) throws Exception {
            	MethodParameter[] parameters = getMethodParameters();
            	if (ObjectUtils.isEmpty(parameters)) {
            		return new Object[0];
            	}

            	Object[] args = new Object[parameters.length];
            	for (int i = 0; i < parameters.length; i++) {
            		MethodParameter parameter = parameters[i];
            		parameter.initParameterNameDiscovery(this.parameterNameDiscoverer);
            		if (!this.resolvers.supportsParameter(parameter)) {
            			throw new IllegalStateException(formatArgumentError(parameter, "No suitable resolver"));
            		}
            		try {
            			args[i] = this.resolvers.resolveArgument(parameter, mavContainer, request, this.dataBinderFactory);
            		} catch (Exception ex) {
            			throw ex;
            		}
            	}
            	return args;
            }
        上述解析参数的逻辑可以分为两步：（1）获取目标接口的参数数组，并判断是否为空(参数为空即不需要处理参数)；（2）遍历参数数组，根据参数解析器对每个参数对象依此进行处理，如果没有匹配的参数处理器，则抛出IllegalStateException异常。

        这里的参数解析器this.resolvers类型是HandlerMethodArgumentResolverComposite，是一个组合模型，内部维持了一个HandlerMethodArgumentResolver数组：
        private final List<HandlerMethodArgumentResolver> argumentResolvers
        参数解析最终都会派发给argumentResolvers的各个元素，派发原则是选择第一个满足匹配规则的参数解析器。
            在后续SpringMVC源码介绍过程中，会发现框架大量使用了组合设计模式；大部分采取匹配+处理的组合手段完成。
            因此HandlerMethodArgumentResolver接口需要有两个接口：
                public interface HandlerMethodArgumentResolver {
                	boolean supportsParameter(MethodParameter parameter);

                	Object resolveArgument(MethodParameter parameter, @Nullable ModelAndViewContainer mavContainer,
                			NativeWebRequest webRequest, @Nullable WebDataBinderFactory binderFactory) throws Exception;
                }
            supportsParameter方法用于判断该HandlerMethodArgumentResolver是否与参数匹配，resolveArgument方法用于解析参数并返回解析结果。

    1.2 初始化过程
        1.2.1   ServletInvocableHandlerMethods的resolvers属性
            解析过程的核心在于参数解析器，即ServletInvocableHandlerMethod对象中的HandlerMethodArgumentResolverComposite resolvers属性，而每次HTTP调用都会生成一个ServletInvocableHandlerMethod对象，因此关注该对象的resolvers属性如何被初始化即可：
            如上所示：ServletInvocableHandlerMethod对象的resolvers属性来自RequestMappingHandlerAdapter对象的this.argumentResolvers属性。
            RequestMappingHandlerAdapter的argumentResolvers属性
                继续跟踪RequestMappingHandlerAdapter的this.argumentResolvers属性初始化过程，需要注意的是RequestMappingHandlerAdapter是全局Bean对象，因此可以从头梳理一下该对象关于argumentResolvers属性的初始化过程。
                1.2.1.1 实例化阶段
                    @Bean
                    public RequestMappingHandlerAdapter requestMappingHandlerAdapter(
                    		@Qualifier("mvcContentNegotiationManager") ContentNegotiationManager contentNegotiationManager,
                    		@Qualifier("mvcConversionService") FormattingConversionService conversionService,
                    		@Qualifier("mvcValidator") Validator validator) {

                    	RequestMappingHandlerAdapter adapter = createRequestMappingHandlerAdapter();
                    	adapter.setCustomArgumentResolvers(getArgumentResolvers());

                    	// ...
                    	return adapter;
                    }
                    createRequestMappingHandlerAdapter()返回RequestMappingHandlerAdapter实例后，将getArgumentResolvers()获取的自定义参数解析器设置到this.customArgumentResolvers属性中。
                    看一下getArgumentResolvers()逻辑：
                   configurers来自于IOC容器中WebMvcConfigurer类型的对象。

                   因此用户可自定义WebMvcConfigurer对象并将其注入到IOC中，在自定义的WebMvcConfigurer类中通过复写addArgumentResolvers方法可实现自定义参数解析器的添加。
                1.2.1.2 初始化阶段
                    RequestMappingHandlerAdapter实现了InitializingBean接口，在Bean的初始化阶段中，会调用其afterPropertiesSet()钩子函数：
                    可以看出所有的参数解析器来自有getDefaultArgumentResolvers()方法：
                    这里包含了框架内置的参数解析器以及自定义参数解析器，需要注意一下几点：
                        （1）getCustomArgumentResolvers()来自于【1】实例化阶段中设置的自定义参数解析器；
                        （2）自定义参数解析器的顺序比较靠后，需要避免被其他参数解析器拦截，supportsParameter方法可以根据参数类型进行匹配。
                        （3）首位端各存在一个RequestParamMethodArgumentResolver类型的参数解析器，区别是内部useDefaultResolution属性前者是false, 后者是true.










文章来源:
https://blog.csdn.net/Sheng_Q/article/details/133231417
