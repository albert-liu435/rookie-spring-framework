Spring的Bean的生命周期
我们以下面这段代码来进行分析
@Slf4j
class UserLifeCycleTest {

    @Test
    void test01() {
        AbstractApplicationContext context = new ClassPathXmlApplicationContext("springframework/context/lifecycle/lifecycle-spring.xml");
        final String[] beanDefinitionNames = context.getBeanDefinitionNames();
        Arrays.stream(beanDefinitionNames).forEach(beanDefinitionName -> log.info("name contains {}.", beanDefinitionName));

        UserLifeCycle userLifeCycle = (UserLifeCycle) context.getBean("userLifeCycle");
        log.info("UserLifeCycle: {}", userLifeCycle);
    }

}
整体流程查看图：./pic/lifecycle/Bean生命周期.png
Bean的实例化触发时机是在 org.springframework.context.support.AbstractApplicationContext#finishBeanFactoryInitialization(beanFactory);也就是在这个方法执行之前需要将Bean的元数据全部都加载到Spring的容器中
对与上面的实例，加载流程是在org.springframework.context.support.AbstractRefreshableApplicationContext#refreshBeanFactory()中进行的



一 元数据加载
对容器进行刷新并设置beanFactory(即DefaultListableBeanFactory)
org.springframework.context.support.AbstractRefreshableApplicationContext#refreshBeanFactory()
		2、创建XmlBeanDefinitionReader对象进行加载
    --->org.springframework.context.support.AbstractXmlApplicationContext#loadBeanDefinitions()
            3、通过xml路径获取资源对象
        --->org.springframework.beans.factory.support.AbstractBeanDefinitionReader#loadBeanDefinitions()
                4、解析xml文件为Document对象
            --->org.springframework.beans.factory.xml.XmlBeanDefinitionReader#doLoadBeanDefinitions()
                    5、创建BeanDefinitionDocumentReader对象，用于解析Document
                --->org.springframework.beans.factory.xml.XmlBeanDefinitionReader#registerBeanDefinitions()
                        --->org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader#doRegisterBeanDefinitions()

    1   AbstractRefreshableApplicationContext#refreshBeanFactory()  对容器进行刷新并设置beanFactory(即DefaultListableBeanFactory)
        本步骤的主要操作为
            1.1	判断是否存在beanFactory(即DefaultListableBeanFactory)对象,不存在就创建一个
            1.2	通过customizeBeanFactory方法对beanFactory进行自定义设置
            1.3	通过loadBeanDefinitions方法加载xml然后转化为BeanDefinition并存储到beanFactory对象中,其中loadBeanDefinitions()由子类AbstractXmlApplicationContext实现

    2	AbstractXmlApplicationContext#loadBeanDefinitions()	创建XmlBeanDefinitionReader对象进行加载
        2.1	创建XmlBeanDefinitionReader对象并设置ConfigurableEnvironment到XmlBeanDefinitionReader中
        2.2	然后通过loadBeanDefinitions(XmlBeanDefinitionReader reader)方法获取xml文件位置，并交由XmlBeanDefinitionReader进行处理

    3	AbstractBeanDefinitionReader#loadBeanDefinitions()	通过xml路径获取资源对象
        3.1	获取资源类加载器ResourceLoader，判断ResourceLoader是否为ResourcePatternResolver，如果是的话调用resourcePatternResolver.getResources(location)转化为资源对象
        3.2	通过loadBeanDefinitions()方法加载资源

    4   XmlBeanDefinitionReader#doLoadBeanDefinitions() 解析xml文件为Document对象

    5	XmlBeanDefinitionReader#registerBeanDefinitions() 创建BeanDefinitionDocumentReader对象，用于解析Document

    6	DefaultBeanDefinitionDocumentReader#doRegisterBeanDefinitions() 解析xml中的标签转化为BeanDefinitionHolder，BeanDefinitionHolder中含有BeanDefinition属性，后续在Bean实例化的时候就是通过该属性进行Bean实例化


加载元数据流程图./pic/lifecycle/元数据加载.png

二   Bean的生命周期
    每个Bean的生命周期都包括：实例化、属性设置、初始化、入单例池、销毁等阶段，整个流程可表示为 ./pic/lifecycle/生命周期四阶段.png











































参考文章:


https://cloud.tencent.com/developer/article/2216932
https://segmentfault.com/a/1190000040365130
https://blog.csdn.net/Sheng_Q/article/details/128277691
https://blog.csdn.net/a745233700/article/details/113840727
