文章来源：
https://blog.csdn.net/seasonLai/article/details/82994463
https://blog.csdn.net/weixin_41835612/article/details/107242055
https://blog.csdn.net/Sheng_Q/article/details/128277725


在学习该占位符的使用与原理，我们需要先学习一下Spring的自定义标签
参考：./other/01-spring自定义解析.txt

本篇所使用的测试类如下
项目:rookie-spring-framework-web
测试类：com.rookie.bigdata.springframework.context.propertysources.PropertyConfigTest#testXml()

处理流程图：
./pic/lifecycle/占位符/01_占位符.png

org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader#parseBeanDefinitions()
    1、PropertySourcesPlaceholderConfigurer分析
    --->org.springframework.context.config.PropertyPlaceholderBeanDefinitionParser#parse()

1   PropertySourcesPlaceholderConfigurer分析
    1.1 PropertySourcesPlaceholderConfigurer类的解析是通过进行上面对xml文件解析，然后生成BeanDefintion,后续进行实例化。


2   PropertySourcesPlaceholderConfigurer原理
    2.1 前置知识
        2.1.1   Properties类型介绍
            Properties继承了Hashtable，因此可以看作一个特殊的Map类型(功能加强的Map), 因此Properties也基于键值对的存储结构提供了很多接口,Properties可以被用来从配置文件中加载资源入内存。
        2.1.2   PropertySource类型介绍
            抽象类PropertySource被定义为资源对象，内部存在两个属性：name和泛型的source对象。通过equals和hashCode方法可知name属性被作为判断PropertySource对象是否相等的依据
            定义类一个抽象的getProperty(String propertyName)方法给自类实现，接口的功能是根据propertyName从source属性中取值；需要注意propertyName与PropertySource中的name属性不是同一概念(name仅作为PropertySource对象对外的身份)。PropertySource有两个比较重要的实现类：PropertiesPropertySource和ResourcePropertySource
            PropertiesPropertySource的source属性为Properties类型；注意Properties是Hashtable的子类，自然也是Map类型的子类。其父类MapPropertySource实现了PropertySource定义的Object getProperty(String name)接口,根据key从Map类型的source对象中取值。
            PropertySource的实现类ResourcePropertySource：
            ResourcePropertySource作为PropertiesPropertySource的子类，在PropertiesPropertySource基础上新增了读取资源文件的能力。其中PropertiesLoaderUtils.loadProperties(new EncodedResource(resource)))会根据传入的Resource对象指定的文件资源去加载、读取并生成Properties对象。
            PropertySource的容器类MutablePropertySources：
            MutablePropertySources作为PropertySource的容器，在内部维持了一个PropertySource类型的列表，基于此对外提供了存储、管理、查询PropertySource对象能力的API
        2.1.3   PropertyResolver类型介绍
            PropertyResolver接口定义了根据key获取value以及处理占位符字符串的能力。PropertyResolver的实现类PropertySourcesPropertyResolver：实例化PropertySourcesPropertyResolver对象时，需要传入一个PropertySources作为入参。String getProperty(String key)及其重载方法取值的实现原理：遍历propertySources对象内部的PropertySource对象，依次从中取值，直到取值成功或者遍历至最后一个PropertySource对象。String resolvePlaceholders(String text)的入参为待解析的字符串(包含占位符)，返回的字符串为解析后的结果。解析过程中需要通过String getProperty(String key)及其重载方法从PropertySource对象列表中取值。代码的整体逻辑比较简单，通过递归操作🥷先解析最内侧的占位符，得到一个中间值propVal(来源于配置文件或者环境变量等)；propVal可能也包含占位符，因此也需要对其进行解析。递归返回后，会按照由外到内的顺序依次进行。
            2.1.3.1 解析最终调用的是org.springframework.util.PropertyPlaceholderHelper#parseStringValue()这个方法
                1   先拿到要替换的值（即：${xx}中的xx)
                2   递归解析，拿到真正要替换的值（即有可能是${${}/xx}这样的）
                3   调用placeholderResolver的resolvePlaceholder方法拿到属性值（其实就会调用上面传递的getPropertyAsRawString方法）
                4   如果属性值为空，可能是有默认值分隔符（即有：）,一番处理后拿到属性值
                5   对属性值进行递归解析，拿到最终属性值（即可能是在属性文件中写法：xxx=${xxx},一般是多个属性文件的情况）
                6   最终属性值不为空就替换，否则根据 ignoreUnresolvablePlaceholders判断是否抛异常还是继续解析
                7   把解析成功的要替换的值从visitedPlaceholders中移除
                8   继续循环或返回结果

    2.2 原理
        Spring框架处理占位符问题时选择的目标对象是BeanDefinition，因此无论以何种方式引入的Bean，处理过程均可统一。具体的实现方案是引入一个BeanFactoryPostProcessor类型的PropertySourcesPlaceholderConfigurer类，并将解析逻辑封装在其内部；在Spring容器启动过程中，通过invokeBeanFactoryPostProcessors(beanFactory);进行触发。
        PropertySourcesPlaceholderConfigurer中的postProcessBeanFactory方法：
            (1) 构建一个MutablePropertySources资源对象容器；
            (2) 向其中加入名称为environmentProperties的PropertySource对象，包含了系统属性、应用属性、环境变量等信息；其中application.yml中配置的属性也包含在其中；
            (3) 向其中加入名称为localProperties的PropertySource对象，包含了引入的配置文件中的信息；
            (4) 将MutablePropertySources作为构造参数创建一个PropertySourcesPropertyResolver解析器对象;
            (5) 调用processProperties(beanFactory, new PropertySourcesPropertyResolver(this.propertySources));处理占位符。
            processProperties方法共两个入参：beanFactory和PropertySourcesPropertyResolver解析器对象；beanFactory容器能够获取所有的BeanDefinition信息，PropertySourcesPropertyResolver解析器对象内部包含了所有的配置信息以及基于此封装的解析能力。






