文章来源:
https://cloud.tencent.com/developer/article/2216932
https://blog.csdn.net/Sheng_Q/article/details/128277673


测试项目：rookie-spring-framework-web
测试类:com.rookie.bigdata.springframework.context.lifecycle.UserLifeCycleTest.test01()

com.rookie.bigdata.springframework.beans.factory.config.postprocessor.PostProcessorConfigTest


org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#doCreateBean()
    1、创建Bean
    --->org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#createBeanInstance()
    2、merged BeanDefinition
    --->org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#applyMergedBeanDefinitionPostProcessors()
    3、暴露工厂对象
    --->org.springframework.beans.factory.support.DefaultSingletonBeanRegistry#addSingletonFactory()
    4、属性填充
    --->org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#populateBean()
    5、初始化Bean
    --->org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#initializeBean()

1   创建Bean
    1.1 再次解析BeanDefinition的class,确保class已经被解析
    1.2 先判断是否提供了Supplier，如果提供，则通过Supplier产生对象。具体测试类可以使用rookie-spring-framework-web项目中的com.rookie.bigdata.springframework.context.annotation.configuration.ConfigurationAnnotationConfigTest#testSupplier()进行测试查看
    1.3 再判断是否提供工厂方法，如果提供，则使用工厂方法产生对象。
    1.4 如果都没提供，需要进行构造方法的推断，逻辑为：
        1.4.1   如果仅有一个构造方法，会直接使用该构造方法(如果构造方法有参数，会自动注入依赖参数)
        1.4.2   如果有多个构造参数，会判断有没有加了@Autowired注解的构造参数:
            1.4.2.1 如果没有，Spring默认选择无参构造方法;
            1.4.2.2 如果有，且有@Autowired(required=true)的构造方法，就会选择该构造方法;
            1.4.2.3 如果有，但是没有@Autowired(required=true)的构造方法，Spring会从所有加了@Autowired的构造方法中，根据构造器参数个数、类型匹配程度等综合打分，选择一个匹配参数最多，类型最准确的构造方法。
流程图可以参考:
./pic/lifecycle/01_创建bean.png
./pic/lifecycle/02_创建bean时推断构造方法的流程分析.png

2   merged BeanDefinition
    本阶段是Spring提供的一个拓展点，通过MergedBeanDefinitionPostProcessor类型的后置处理器，可以对bean对应的BeanDefinition进行修改。Spring自身也充分利用该拓展点，做了很多初始化操作(并没有修改BeanDefinition)，比如查找标注了@Autowired、 @Resource、@PostConstruct、@PreDestory 的属性和方法，方便后续进行属性注入和初始化回调。当然，我们也可以自定义实现，用来修改BeanDefinition信息或者我们需要的初始化操作
流程图可以参考:
./pic/lifecycle/03_merged BeanDefinition.png
./pic/lifecycle/04_merged阶段的查找.png

3   暴露工厂对象

本阶段主要是将早期bean对象提前放入到三级缓存singletonFactories中，为循环依赖做支持。在后续进行属性填充时，如果发生循环依赖，可以从三级缓存中通过getObject()获取该bean，完成循环依赖场景下的自动注入。

流程图可以参考:
./pic/lifecycle/05_暴露工厂对象.png

4   属性填充
    本阶段完成了Spring的核心功能之一：依赖注入，包括自动注入、@Autowired注入、@Resource注入等。Spring会根据bean的注入模型(默认不自动注入)，选择根据名称自动注入还是根据类型自动注入。然后调用InstantiationAwareBeanPostProcessor#postProcessProperties()完成@Autowired和@Resource的属性注入。
    4.1 获取bean的注入类型，进行自动注入。
        4.1.1   根据名称注入
        4.1.2   根据类型注入
    4.2 调用BeanPostProcessor，完成@Autowired @Resource属性填充
        4.2.1   完成@Autowired @Resource属性填充
        4.2.2   需要注入的属性,会过滤掉Aware接口包含的属性(通过ignoreDependencyInterface添加)
    4.3 依赖检查
    4.4 将属性应用到bean中
流程图可以参考:
./pic/lifecycle/06_属性填充.png

5   初始化Bean
    该阶段主要做bean的初始化操作，包括：回调Aware接口、回调初始化方法、生成代理对象等。
    5.1 invokeAwareMethods()：回调BeanNameAware、BeanClassLoaderAware、BeanFactoryAware感知接口。回调后置处理器的前置方法，其中： ApplicationContextAwareProcessor: 回调EnvironmentAware、ResourceLoaderAware、ApplicationContextAware、ApplicationEventPublisherAware、MessageSourceAware、EmbeddedValueResolverAware感知接口。InitDestroyAnnotationBeanPostProcessor：调用了标注了@PostConstruct的方法。
    5.2 invokeInitMethods()调用初始化方法:
        如果bean是InitializingBean的子类, 先调用afterPropertiesSet()。回调自定义的initMethod，比如通过@Bean(initMethod = "xxx")指定的初始化方法。回调后置处理器的后置方法，可能返回代理对象。其中AbstractAutoProxyCreator和 AbstractAdvisingBeanPostProcessor都有可能产生代理对象，比如InfrastructureAdvisorAutoProxyCreator完成了@Transactional代理对象的生成，AsyncAnnotationBeanPostProcessor完成了@Async代理对象的生成。
流程图可以参考:
./pic/lifecycle/08_初始化bean.png


6   Bean的来龙去脉
./pic/lifecycle/09_扫描阶段.png
./pic/lifecycle/10_初始化后回调.png
./pic/lifecycle/11_bean的销毁.png




