


Spring AOP
一   基本概念
        [1] 执行点：在Spring AOP中指代目标类中具体的方法；
        [2] 连接点：包含位置信息的执行点，位置信息包括：方法执行前、后、前后、异常抛出等；
        [3] 切点：根据指定条件(类是否符合、方法是否符合等)过滤出的执行点的集合；
        [4] 通知/增强：为目标对象增加的新功能，如在业务代码中引入日志、访问控制等功能；
        [5] 切面：切面由切点和通知组成；
        [6] 织入：将切面织入目标对象，形成代理对象的过程。
    1.1 增强类型
        Spring中使用Advise标记接口表示增强，Spring根据方位信息(方法执行前后、环绕、异常抛出等)为其定义了不同的子类接口
            public interface Advice {}
    1.2 增强类型相关接口
        1.2.1   前置增强
            BeforeAdvice接口表示前置增强，由于Spring当前仅支持方法增强，所以可用的接口为MethodBeforeAdvice
            //同Advise接口，BeforeAdvice也是个空接口
            public interface MethodBeforeAdvice extends BeforeAdvice {
            	void before(Method method, Object[] args, @Nullable Object target) throws Throwable;
            }
            如上所示，MethodBeforeAdvice接口中仅有一个before方法，入参分别是方法对象、参数数组、目标对象；该方法会在目标对象的方法调用前调用。
        1.2.1   后置增强
            public interface AfterReturningAdvice extends AfterAdvice {
            	void afterReturning(@Nullable Object returnValue, Method method, Object[] args, @Nullable Object target) throws Throwable;
            }
            该方法中仅有一个afterReturning方法，入参比before多处一个返回值；该方法会在目标对象的方法调用后调用。
        1.2.3   环绕增强
            @FunctionalInterface
            // Interceptor 是Advise的字接口，且是空接口
            public interface MethodInterceptor extends Interceptor {
            	@Nullable
            	Object invoke(@Nonnull MethodInvocation invocation) throws Throwable;
            }
            可通过invocation.proceed()语句调用目标对象方法并获得放回值，可在前后自定义逻辑，相对于前置和后置有更高的灵活性。
        1.2.4   异常抛出增强
            public interface ThrowsAdvice extends AfterAdvice {
            }
            ThrowsAdvice是一个空接口，起标签作用。在运行期间Spring通过反射调用afterThrowing接口，该接口可以被定义为：void afterThrowing(Method method, Object[] args, Object target, Throwable exception)；
            其中method、args和target是可选的，exception参数是必选的；在目标方法抛出异常后，实施增强。
            除此之外，框架还定义了一种引介增强，用于在目标类中添加一些新的方法和属性。

    1.3 切点类型
        框架定义切点是为了从目标类的连接点(执行点)中过滤出符合条件的部分，为此在切点类的内部提供类两个过滤器：ClassFilter和MethodMatcher，分别对类型和方法进行过滤
        public interface Pointcut {
        	ClassFilter getClassFilter();

        	MethodMatcher getMethodMatcher();

        	// Pointcut.TRUE 对象表示所有目标类的所有方法均满足条件
        	// （实例对应的ClassFilter和MethodMatcher对象的match方法均返回true）
        	Pointcut TRUE = TruePointcut.INSTANCE;
        }
        Pointcut切点接口定义如上所示，Spring并基于此扩展出了多种切点类型；使得可以根据方法名、参数、是否包含注解以及表达式等进行过滤。

    1.4 切面类型
        Spring使用Advisor表示切面类型，可以分为3类：一般切面Advisor、切点切面PointcutAdvisor、引介切面IntroductionAdvisor；一般切面Advisor仅包含一个Advice, 即表示作用对象是所有目标类的所有方法；PointcutAdvisor包含Advice和Pointcut信息，可以通过切点定位出满足Pointcut过滤条件的执行点集合；IntroductionAdvisor对应于引介切点和增强。
        public class DefaultPointcutAdvisor extends AbstractGenericPointcutAdvisor implements Serializable {

        	private Pointcut pointcut = Pointcut.TRUE;

        	private Advice advice = EMPTY_ADVICE;

        	public DefaultPointcutAdvisor() {
        	}

        	public DefaultPointcutAdvisor(Advice advice) {
        		this(Pointcut.TRUE, advice);
        	}

        	public DefaultPointcutAdvisor(Pointcut pointcut, Advice advice) {
        		this.pointcut = pointcut;
        		setAdvice(advice);
        	}
        }
        DefaultPointcutAdvisor包含一个切点和一个增强类型属性：Pointcut的默认值为Pointcut.TRUE表示所有目标类的所有方法均为连接点；Advice的默认值为EMPTY_ADVICE：Advice EMPTY_ADVICE = new Advice() {};, 即表示不进行增强。

二   实现原理





















文章来源：
https://cloud.tencent.com/developer/article/2089244
https://www.nowcoder.com/discuss/473227892445446144
https://juejin.cn/post/6974018412158664734
https://juejin.cn/post/6844903744954433544
https://cloud.tencent.com/developer/article/1461796

https://blog.csdn.net/M_drm/article/details/106135801
https://www.xxelin.com/2020/04/23/ProxyFactory-source/
