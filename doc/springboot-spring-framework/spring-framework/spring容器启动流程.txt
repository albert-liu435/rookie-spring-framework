我们以com.rookie.bigdata.springframework.context.annotation.configuration.ConfigurationAnnotationConfigTest#testContainer()执行测试类来进行分析
    @Test
    void testContainer() {
        //容器执行流程
        AnnotationConfigApplicationContext context =
                new AnnotationConfigApplicationContext(ConfigurationAnnotationConfig.class);
        ConfigurationAnnotationConfig config = context.getBean(ConfigurationAnnotationConfig.class);
    }
项目工程为：rookie-spring-framework-web

Spring的启动流程可以归纳为三个步骤：

    1、初始化Spring容器，注册内置的AnnotatedBeanDefinitionReader将的BeanDefinition注入到容器中
    2、将配置类的BeanDefinition注册到容器中
    3、调用refresh()方法刷新容器
参考图片：./启动流程/001.png
一、初始化流程
    spring容器的初始化时，通过this()调用了无参构造函数，主要做了以下三个事情：
    1   实例化BeanFactory【DefaultListableBeanFactory】工厂，用于生成Bean对象
    2   实例化AnnotatedBeanDefinitionReader注解配置读取器，用于对特定注解（如@Service、@Repository）的类进行读取转化成  BeanDefinition 对象，（BeanDefinition 是 Spring 中极其重要的一个概念，它存储了 bean 对象的所有特征信息，如是否单例，是否懒加载，factoryBeanName 等）。代码运行到这里时候，Spring 容器已经构造完毕，那么就可以为容器添加一些内置组件了，其中最主要的组件便是 ConfigurationClassPostProcessor 和 AutowiredAnnotationBeanPostProcessor ，前者是一个 beanFactory 后置处理器，用来完成 bean 的扫描与注入工作，后者是一个 bean 后置处理器，用来完成 @AutoWired 自动注入。
    3   实例化ClassPathBeanDefinitionScanner路径扫描器，用于对指定的包目录进行扫描查找 bean 对象

二、注册ConfigurationAnnotationConfig配置类到容器中
    将SpringConfig注册到容器中：org.springframework.context.annotation.AnnotatedBeanDefinitionReader#doRegisterBean：这个步骤主要是用来解析用户传入的 Spring 配置类，解析成一个 BeanDefinition 然后注册到容器中


三、refresh()方法
refresh()方法的主线逻辑如下所示可被分为12个步骤，AbstractApplicationContext进行了相当程度的实现，子类也可基于此进行扩展：

public void refresh() throws BeansException, IllegalStateException {
	synchronized (this.startupShutdownMonitor) {
		// ⚠️1.Prepare this context for refreshing.
		prepareRefresh();

		//  ⚠️2.Tell the subclass to refresh the internal bean factory.
		ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();

		// 3.Prepare the bean factory for use in this context.
		prepareBeanFactory(beanFactory);

		try {
			//  ⚠️4.Allows post-processing of the bean factory in context subclasses.
			postProcessBeanFactory(beanFactory);

			//  ⚠️5.Invoke factory processors registered as beans in the context.
			invokeBeanFactoryPostProcessors(beanFactory);

			//  ⚠️6.Register bean processors that intercept bean creation.
			registerBeanPostProcessors(beanFactory);

			//  ⚠️7.Initialize message source for this context.
			initMessageSource();

			//  ⚠️8.Initialize event multicaster for this context.
			initApplicationEventMulticaster();

			//  ⚠️9.Initialize other special beans in specific context subclasses.
			onRefresh();

			//  ⚠️10.Check for listener beans and register them.
			registerListeners();

			//  ⚠️11.Instantiate all remaining (non-lazy-init) singletons.
			finishBeanFactoryInitialization(beanFactory);

			//  ⚠️12.Last step: publish corresponding event.
			finishRefresh();
		} catch (BeansException ex) {
			//...
		} finally {
			//...
		}
	}
}


1    PrepareRefresh() 刷新前的预处理
        initPropertySources()初始化一些属性设置，子类可扩展initPropertySources()方法，Spring web框架对该方法进行了扩展，实现从环境变量中获取属性值填充占位符。
        getEnvironment().validateRequiredProperties(); 检验属性的合法等。可用于进行容器启动前的环境变量校验，要求指定的变量必须被赋值
        earlyApplicationEvents = new LinkedHashSet<ApplicationEvent>; 保存容器中的一些早期时间。属性用于收集事件广播器被初始化前的事件，在广播器创建后再触发这些事件，因此需要提前被初始化；当容器启动完成后，该属性需要被再次设置为null。

2   obtainFreshBeanFactory(); 获取BeanFactory
        refreshBeanFactory(); 刷新【创建】BeanFactory,refreshBeanFactory()在子类中有不同的实现.
        getBeanFactory(); 返回刚才GenericApplicationContext创建的BeanFactory对象.而getBeanFactory()返回的都是new出来的DefaultListableBeanFactory类型的对象。对于AbstractRefreshableApplicationContext类型的Spring容器,refreshBeanFactory()进行了以下扩展：createBeanFactory()方法通过直接new方式创建DefaultListableBeanFactory类型的IOC容器；通过调用容器的setSerializationId方法设置serializationId属性。重点在于customizeBeanFactory(beanFactory);和loadBeanDefinitions(beanFactory);方法；customizeBeanFactory方法允许对容器进行一些设置，如同名Bean是否覆盖问题、是否支持循环依赖等，如下所示：loadBeanDefinitions(beanFactory)方法的功能是向IOC容器中注册BeanDefinition信息，这些BeanDefinition信息可以来自于XML配置文件、属性文件、Groovy配置文件等。
        将创建的BeanFactory对象【DefaultListableBeanFactory】返回

3   prepareBeanFactory(beanFactory); BeanFactory的预备准备工作（BeanFactory进行一些设置）
        prepareBeanFactory(beanFactory)方法为beanFactory进行容器刷新前的准备工作，可以分为如下几类：
        3.1 初始化Spring组件
            包括类加载器BeanClassLoader、bean表达式解析器StandardBeanExpressionResolver、属性编辑器ResourceEditorRegistrar,Aware处理器ApplicationContextAwareProcessor。监听器监测器ApplicationListenerDetector；注意：ApplicationListenerDetector在前后两次被加入到容器的beanPostProcessors属性中。
        3.2 beanFactory其他属性初始化
            对框架引入的Aware接口，如EnvironmentAware、ApplicationEventPublisherAware、MessageSourceAware、ApplicationContextAware等，需要添加到ignoreDependencyInterfaces属性中标记不需要进行依赖检查和自动注入；因为ApplicationContextAwareProcessor组件对于实现Aware接口的类在回调过程中设置了属性信息。
        3.3 LTW配置
            AOP切面的织入方式有三种：编译阶段，通过特殊的编译器实现，如AspectJ；类加载阶段，通过LTW实现；运行时，通过JDK或者CGLIB动态代理实现。工作中未见过LTW的实际使用场景，不是本文关注的对象。
        3.4 注入环境信息相关的Bean对象
            包括环境对象Bean(environment)，系统属性Bean(systemProperties)，系统环境变量Bean(systemEnvironment)，这些Bean对象的直接数据来源为System.getProperties()、System.getenv()，即将机器的环境变量信息使用Bean的方式进行了包装。

4   postProcessBeanFactory(beanFactory); BeanFactory准备工作完成后进行的后置处理工作：
            预留给子类容器扩展，在容器刷新前进行的定制化操作。子类通过这个方法在BeanFactory创建并预准备完成后做的进一步设置

============================以上是BeanFactoty的创建和预准备工作==============================================

5   invokeBeanFactoryPostProcessor(beanFactory); 执行BeanFactoryPostProcessor
参考图片: ./启动流程/PostProcessorRegistrationDelegate.jpeg
        Spring容器按照 PriorityOrder接口 > Ordered接口 > non的顺序依次调用BeanFactoryPostProcessor对象的postProcessBeanFactory方法。该方法为容器级别，即容器启动过程中postProcessBeanFactory之后调用一次。
        BeanFactoryPostProcessor：BeanFactory的后置处理器。在BeanFactory标准初始化之后执行的。主要涉及到两个接口，BeanFactoryPostProcessor、BeanDefinitionRegistryPostProcessor
    5.1 执行invokeBeanFactoryPostProcessors(ConfigurableListableBeanFactory beanFactory, List<BeanFactoryPostProcessor> beanFactoryPostProcessors)
        5.1.1   先执行BeanDefinitionRegistryPostProcessor
            a. 获取所有的BeanDefinitionRegistryPostProcessor
            b. 先执行实现了PriorityOrdered优先级接口的BeanDefinitionRegistryPostProcessor
                执行方法postProcessor.postProcessBeanDefinitionRegistry(registry)
            c. 再执行实现了Ordered顺序接口的BeanDefinitionRegistryPostProcessor
                执行方法postProcessor.postProcessBeanDefinitionRegistry(registry)
            d. 最后执行没有实现任何优先级或者是顺序接口的BeanDefinitionRegistryPostProcessor
                执行方法postProcessor.postProcessBeanDefinitionRegistry(registry)
        5.1.2   再执行BeanFactoryPostProcessor的方法
            a. 获取所有的BeanFactoryPostProcessor
            b. 先执行实现了PriorityOrdered优先级接口的BeanFacotryPostProcessor
                执行方法postProcessor.postProcessBeanFactory(registry)
            c. 再执行实现了Ordered顺序接口的BeanFacotryPostProcessor
                执行方法postProcessor.postProcessBeanFactory(registry)
            d. 最后执行没有实现任何优先级或者是顺序接口的BeanFacotryPostProcessor
                执行方法postProcessor.postProcessBeanFactory(registry)

6   registerBeanPostProcessors(beanFactory)
    不同接口类型的BeanPostProcessor：在Bean创建前后的执行时机是不一样的
    Spring容器按照 PriorityOrder接口 > Ordered接口 > non的顺序依次将BeanPostProcessor加入到IOC容器的beanPostProcessors属性中。在Bean对象的初始化阶段会调用BeanPostProcessor的勾子方法，即每个Bean在创建过程中都需要经历BeanPostProcessor的装饰和处理。另外，在该方法的最后，Spring再次将ApplicationListenerDetector加入到IOC中。
　　
    BeanPostProcessor、
    DestructionAwareBeanPostProcessor、
　　InstantiationAwareBeanPostProcessor、
　　SmartInstantiationAwareBeanPostProcessor、
　　MergedBeanDefinitionPostProcessor
        1）获取所有的BeanPostProcessor ；后置处理器都默认可以通过PriorityOrdered、Ordered接口来指定优先级
        2）先注册PriorityOrdered优先级接口的BeanPostProcessor
            把每一个BeanPostProcessor添加到BeanFactory中
            beanFactory.addBeanPostProcessor(postProcessor)
        3) 再注册Ordered优先级接口的BeanPostProcessor
        4）然后再注册没有任何优先级接口的BeanPostProcessor
        5）最终注册MergedBeanDefinitionPostProcessor
        6）注册一个ApplicationListenerDetector: 再Bean创建完成后检查是否是ApplicationListener，如果是则执行
            applicationContext.addApplicaitonListener((ApplicationListener<?>) bean)

7   InitMessageSource()；初始化MessageSource组件（做国际化功能；消息绑定，消息解析）
    1）获取BeanFactory
    2）看容器中是否有id为messageSource，类型是MssageSource的组件
        如果有就赋值给messageSource，如果没有就自己创建一个DelegatingMssageSource;
        MssageSource: 取出国际化配置文件中某个key的值；能按照区域信息获取；
    3）把创建好的messageSource注册到容器中，以后获取国际化配置文件的时候，可以自动注入MssageSource，然后可以再调用它的getMessage方法　　　　beanFactory.registerSingleton(MESSAGE_SOURCE_BEAN_NAME, this.messageSource)

8   initApplicationEventMulticaster(); 初始化事件派发器
　　1）获取BeanFactory
　　2）从BeanFactory中获取applicationEventMulticaster的ApplicationEventMulticaster；
　　3）如果上一步没有配置，那就会自己创建一个SimpleApplicationEventMulticaster，然后将创建的ApplicationEventMulticaster组件添加到BeanFactory中，以后其他组件可以直接z注入

9   onRefresh(); 留给子容器(子类)
　　1）子类重写这个方法，在容器刷新的时候可以自定义逻辑

10  registerListeners()；将项目中所有ApplicationListener注册进容器中

　　1）从容器中拿到所有的ApplicationListener
　　2）将每个监听器添加到事件派发器中
　　　　getApplicationEventMulticaster().addApplicationListenerBean(listenerBeanName)
　　3）派发之前步骤产生的事件；

        registerListeners()方法做了两件事件：
        （1）向事件广播器注册监听器
        在Spring容器的事件广播器被初始化前，向Spring容器注册的监听器都会保存在this.applicationListeners属性上：
        因此，需要在事件广播器被初始化后，将监听器注册到广播器上：
        同时，从IOC中取出所有ApplicationListener类型的Bean对象，即用户自定义的监听器对象，将其注册到Spring事件广播器上：
        2）触发earlyEvent
        在容器的准备阶段，Spring对this.earlyApplicationEvents属性进行了初始化，即不会为空；当向Spring容器发生事件时，被记录在this.earlyApplicationEvents属性中：
        在事件广播器被初始化后，需要立刻触发寄存在this.earlyApplicationEvents属性中的事件，并将this.earlyApplicationEvents属性设置为空，以保证后续的事件触发可以经过广播器，不再寄存于this.earlyApplicationEvents属性：

11. finishBeanFactoryInitialization(beanFactory)；初始化所有剩下的单实例Bean

　　1）beanFactory.preInstantiateSingletons()；初始化所有剩下的单实例Bean

　　　　a. 获取容器中的所有bean, 依次进行初始化和创建对象

　　　　b. 获取Bean的定义信息；RootBeanDefinition

　　　　c. Bean 不是抽象的，是单实例的，且不是懒加载的，

　　　　　　a) 判断是不是FactoryBean；是否是实现FactoryBean接口的Bean

　　　　　　b) 如果不是FactoryBean；使用getBean(beanName)创建对象

　　　　　　　　0. getBean(beanName) -> ioc.getBean();

　　　　　　　　1. doGetBean(name, null, null, false)

　　　　　　　　2. 先获取缓存中保存的单实例Bean。如果能获取到，说明这个Bean之前被创建过（所有创建过的单实例Bean都会被缓存起来）

　　　　　　　　　　从singletonObjects中获取

　　　　　　　　3. 缓存中获取不到，开始Bean的创建对象流程；

　　　　　　　　4. 标记当前Bean已经被创建

　　　　　　　　5. 获取Bean的定义信息

　　　　　　　　6. 获取当前Bean依赖的其它Bean；如果有，还是按照getBean() 把依赖的Bean先创建出来

　　　　　　　　7. 启动单实例Bean的创建流程

　　　　　　　　　　1）createBean(beanName, mbd, args);

　　　　　　　　　　2）Object bean = resolveBeforeInstantiation(beanName, mbdToUse);

　　　　　　　　　　　　让BeanPostProcesser先拦截返回代理对象；

　　　　　　　　　　　　InstantiationAwareBeanPostProcessor提前执行

　　　　　　　　　　　   先触发：postProcessBeforeInstantiation();

　　　　　　　　　　　　如果有返回值；再触发postProcessAfterInstantiation()

　　　　　　　　　　3）如果前面的InstantiationAwareBeanPostProcessor没有返回代理对象；调用 4）

　　　　　　　　　　4) Object beanInstance = doCreateBean(beanName, mbdToUse, args) 创建Bean

　　　　　　　　　　　　1） 创建Bean实例，createBeanInstance(beanName, mbd, args)

　　　　　　　　　　　　　　利用工厂方法或者对象的构造器创建出Bean实例

　　　　　　　　　　　　2）applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName)

　　　　　　　　　　　　　　调用MergedBeanDefinitionPostProcessor的postProcessMergedBeanDefinition(mbd, beanType, beanName)

　　　　　　　　　　　　3) 给Bean属性赋值，调用populateBean(beanName, mbd, instanceWrapper)

　　　　　　　　　　　　　赋值之前：

　　　　　　　　　　　　　　a. 拿到InstantiationAwareBeanPostProcessor后置处理器

　　　　　　　　　　　　　　　　执行postProcessAfterInstantiation()

　　　　　　　　　　　　　　b. 拿到InstantiationAwareBeanPostProcessor后置处理器

　　　　　　　　　　　　　　　　执行postProcessPropertyValues()：

 　　　　　　　　　　　　　　c. 应用Bean属性的值：为属性利用setter方法进行赋值（反射）

　　　　　　　　　　　　　　　　applyPropertyValues(beanName, mbd, bw, pvs)

　　　　　　　　　　　　　4）初始化Bean；initializeBean(beanName, exposedObject, mbd);

　　　　　　　　　　　　　　a. 【执行Aware接口方法】 invokeAwareMethods(beanName, bean);执行xxxAware接口的方法

　　　　　　　　　　　　　　　　BeanNameAware\BeanClassLoaderAware\BeanFactoryAware

　　　　　　　　　　　　　　b）【执行后置处理器初始化之前】applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName)

　　　　　　　　　　　　　　　　BeanPostProcessor.postProcessBeforeInitialization();

　　　　　　　　　　　　　　c）【执行初始化方法】invokeInitMethods(beanName, wrappedBean, mbd);

　　　　　　　　　　　　　　　　a. 是否是InitializingBean接口的实现：执行接口规定的初始化

　　　　　　　　　　　　　　　　b. 是否自定义初始化方法

　　　　　　　　　　　　　　d）【执行后置处理器初始化之后】applyBeanPostProcessorsAfterInitialization

　　　　　　　　　　　　　　　　BeanPostProcessor.postProcessAfterInitialization();

　　　　　　　　　　　　　　e）注册Bean的销毁方法

　　　　　　　　　　　　5）将创建的Bean添加到缓存中 - singletonObjects [Map对象]

　　　　　　　IOC容器就是这些Map；很多的Map里保存了单实例Bean，环境信息、、、

　　　　　　　所有Bean都利用getBean创建完成以后；再来检查所有Bean是否是SmartInitializingSingleton接口的实现类，

　　　　　　　　如果是，就执行afterSingletonsInstantiated();

12. finishRefresh(); 完成BeanFactory的初始化创建工作；IOC容器就创建完成；

　　1）initLifecycleProcessor(); 初始化和生命周期相关的后置处理器；LifecycleProcessor

　　　　默认从容器中找是否有lifecycleProcessor的组件【LifecycleProcessor】；如果没有，创建/使用默认的生命周期组件 new DefaultLifecycleProcessor(); 再加入到容器中；

　　　　写一个 LifecycleProcessor的实现类，可以在BeanFactory的下面两个方法刷新和关闭前后进行拦截调用

　　　　　　　　　　　　　　　　　　　　　　　　onRefresh()

　　　　　　　　　　　　　　　　　　　　　　　　onClose()

　　2）getLifecycleProcessor().onRefresh();

　　　　拿到前面定义的生命周期处理器（BeanFactory）；回调.onRefresh();

　　3）publishEvent(new ContextRefreshedEvent(this)); 发布容器刷新完成时间；

　　4）liveBeansView.registerApplicationContext();

=========================================================================总结============================================================

1）spring容器在启动的时候，先回保存所有注册进来的Bean的定义信息

　　a. xml注册bean：<bean>

　　b. 注解注册Bean：@Service、@Repository、@Component、@Bean、xxx

2）Spring容器会在合适的时机创建这些Bean

　　a.用到这个bean的时候，利用getBean创建Bean，创建好以后保存在容器中。

　　b. 统一创建剩下的所有bean的时候：finishBeanFactoryInitialization();

3) 后置处理器：

　　a. 每一个bean创建完成，都会使用各种后置处理器处理，来增强bean的功能；

　　 例如： AutoWiredAnnotationBeanPostProcessor: 处理自动注入功能

　　　　　AnnotationAwareAspectJAutoProxyCreator: 来做AOP功能

4）事件驱动模型：

　　ApplicationListener: 事件监听

　　ApplicationEventMulticaster: 事件派发


参考启动流程中的图片 ./pic/启动流程

参考文章：https://www.cnblogs.com/risuschen/p/12820038.html
https://segmentfault.com/a/1190000040365130
https://cloud.tencent.com/developer/article/2216932
