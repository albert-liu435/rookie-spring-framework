参考文档：
https://blog.csdn.net/yaomingyang/article/details/105636832
https://cloud.tencent.com/developer/article/1986714
https://blog.csdn.net/u013887008/article/details/129313240


配置文件整体加载流程可以查看:./springboot加载配置文件.txt

1   application

    测试项目：rookie-springboot-property
    测试类以及测试方法：com.rookie.bigdata.springframework.boot.context.config.CustomerConfigDataLoaderTest#testApplication()

    Springboot默认加载的配置文件名称为application,这主要得益于org.springframework.boot.context.config.StandardConfigDataLocationResolver中的DEFAULT_CONFIG_NAMES属性。具体的执行流程如下：
        org.springframework.boot.context.config.StandardConfigDataLoader#load()
            --->org.springframework.boot.context.config.ConfigDataLoaders#load()
                --->org.springframework.boot.context.config.ConfigDataImporter#load()
                    --->org.springframework.boot.context.config.ConfigDataImporter#resolveAndLoad()
                        --->org.springframework.boot.context.config.ConfigDataImporter#resolve()
                            --->org.springframework.boot.context.config.ConfigDataLocationResolvers#resolve()
                                --->org.springframework.boot.context.config.StandardConfigDataLocationResolver#resolve()
                                    --->org.springframework.boot.context.config.StandardConfigDataLocationResolver#getReferences()
                                        --->org.springframework.boot.context.config.StandardConfigDataLocationResolver#getReferencesForDirectory()
        主要获取配置方法为 getReferencesForDirectory(),里面创建为StandardConfigDataReference对象并返回

2   spring.config.name指定配置文件名
        spring.config.name配置信息可用参考StandardConfigDataLocationResolver类，里面有一个getConfigNames()方法，也就是获取spring.config.name的配置，如果为空则默认使用application，这个就是项目启动时要加载的配置文件,所以我们可用根据这个配置项来更改项目启动时加载的配置文件信息。如:在启动jar包的时候 用如下命令：java -jar myproject.jar --spring.config.name=myproject, 我们为了测试方便，直接在idea中进行设置，参考pic/1724203030399.png

        测试项目：rookie-springboot-property
        测试类以及测试方法：com.rookie.bigdata.springframework.boot.context.config.CustomerConfigDataLoaderTest#testApplication()

     默认的配置文件名是application，可以使用spring.config.name指定自定义文件名，如下示例：
     java -jar myproject.jar --spring.config.name=rookie

     如果使用IDEA运行的话，在运行测试类的时候，添加变量 --spring.config.name=rookie即可,是在StandardConfigDataLocationResolver的构造方法中处理的。即如下代码
        String[] configNames = binder.bind(CONFIG_NAME_PROPERTY, String[].class).orElse(DEFAULT_CONFIG_NAMES);如果spring.config.name对应的值为空，则使用默认的application,否则使用自定义spring.config.name中设置的值。
        处理流程如下：

        org.springframework.boot.context.config.ConfigDataEnvironmentPostProcessor#postProcessEnvironment()
            --->org.springframework.boot.context.config.ConfigDataEnvironment#createConfigDataLocationResolvers()
                --->org.springframework.boot.context.config.ConfigDataLocationResolvers#ConfigDataLocationResolvers
                    --->org.springframework.boot.context.config.StandardConfigDataLocationResolver.StandardConfigDataLocationResolver()
                        --->org.springframework.boot.context.config.StandardConfigDataLocationResolver.getConfigNames()

4   spring.profiles.active
    测试项目：rookie-springboot-property
    测试类以及测试方法：com.rookie.bigdata.springframework.boot.context.config.CustomerConfigDataLoaderTest#testProfiles()

    spring.profiles.active=dev的理解
        当设置spring.profiles.active=dev的时候，会将该属性设置到Profiles对象上面，后面加载配置文件的时候，会通过该方法org.springframework.boot.context.config.ConfigDataEnvironment#processAndApply()进行加载，对于spring.profiles.active=dev的理解，如下
    	void processAndApply() {
    		ConfigDataImporter importer = new ConfigDataImporter(this.logFactory, this.notFoundAction, this.resolvers,
    				this.loaders);
    		registerBootstrapBinder(this.contributors, null, DENY_INACTIVE_BINDING);
    		ConfigDataEnvironmentContributors contributors = processInitial(this.contributors, importer);
    		ConfigDataActivationContext activationContext = createActivationContext(
    				contributors.getBinder(null, BinderOption.FAIL_ON_BIND_TO_INACTIVE_SOURCE));
    				//加载不包含dev的配置文件，如 application.properties
    		contributors = processWithoutProfiles(contributors, importer, activationContext);
    		//解析Profiles
    		activationContext = withProfiles(contributors, activationContext);
    		//加载包含dev的配置文件，如 application-dev.properties
    		contributors = processWithProfiles(contributors, importer, activationContext);
    		applyToEnvironment(contributors, activationContext, importer.getLoadedLocations(),
    				importer.getOptionalLocations());
    	}

        application-dev.properties的加载过程主要如下：
            org.springframework.boot.context.config.ConfigDataEnvironmentContributors#withProcessedImports()
                --->org.springframework.boot.context.config.ConfigDataImporter#resolveAndLoad()
                    --->org.springframework.boot.context.config.ConfigDataLocationResolvers#resolve()
                        --->org.springframework.boot.context.config.StandardConfigDataLocationResolver#resolveProfileSpecific()



5、spring.config.location与spring.config.additional-location
    spring.config.location与上面的spring.config.name配置方式时一致的,用于指定配置文件替代springboot中的默认配置文件
    --spring.config.location=classpath:/pro/a.yml
    同理spring.config.additional-location与spring.config.name的配置方式一致，spring.config.additional-location用于添加额外的配置文件，
    --spring.config.additional-location=classpath:/pro/a.yml


6   spring.config.import引入额外文件




7、配置文件的优先级与加载顺序
    系统默认加载配置文件的顺序是classpath:/,classpath:/config,file:./,file:./config，配置文件的优先级恰好相反。
    即配置文件优先级由高到低的顺序如下：
                        file:./config/*/
                        file:./config/
                        file:./
                        classpath:/config/
                        classpath:/
    当使用spring.config.location指定配置文件时将会替换掉以上默认位置的配置；例如，如果spring.config.location的配置是classpath:/custom-config/,file:./custom-config/，那么优先级顺序。1、file:./custom-config/ 2、classpath:/custom-config/。
    spring.config.additional-location指定配置文件，该属性是用来指定默认配置之外的位置的配置文件，系统会有限使用指定的外部配置；
    例如，如果指定的配置是classpath:/custom-config/,file:./custom-config/，那么优先级顺序将会是
    file:./custom-config/
    classpath:custom-config/
    file:./config/
    file:./
    classpath:/config/
    classpath:/





